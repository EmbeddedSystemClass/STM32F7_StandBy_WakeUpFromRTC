
STM32F7_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002420  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002618  08002618  00012618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002674  08002674  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002674  08002674  00012674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800267c  0800267c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800267c  0800267c  0001267c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002680  08002680  00012680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000010  08002694  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000050  08002694  00020050  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ef8  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015af  00000000  00000000  00027f36  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000718  00000000  00000000  000294e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000650  00000000  00000000  00029c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025ff9  00000000  00000000  0002a250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006b7e  00000000  00000000  00050249  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed47c  00000000  00000000  00056dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00144243  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b40  00000000  00000000  001442c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08002600 	.word	0x08002600

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08002600 	.word	0x08002600

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053e:	f000 fa2a 	bl	8000996 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000542:	f000 f883 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000546:	f000 f925 	bl	8000794 <MX_GPIO_Init>
  MX_RTC_Init();
 800054a:	f000 f8fd 	bl	8000748 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB)!=RESET)
 800054e:	4b38      	ldr	r3, [pc, #224]	; (8000630 <main+0xf8>)
 8000550:	685b      	ldr	r3, [r3, #4]
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	2b02      	cmp	r3, #2
 8000558:	d12a      	bne.n	80005b0 <main+0x78>
  {
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB); //clear StandBy flag
 800055a:	4b35      	ldr	r3, [pc, #212]	; (8000630 <main+0xf8>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a34      	ldr	r2, [pc, #208]	; (8000630 <main+0xf8>)
 8000560:	f043 0308 	orr.w	r3, r3, #8
 8000564:	6013      	str	r3, [r2, #0]

	  PWRstatus = "Wake up from standby mode";
 8000566:	4b33      	ldr	r3, [pc, #204]	; (8000634 <main+0xfc>)
 8000568:	4a33      	ldr	r2, [pc, #204]	; (8000638 <main+0x100>)
 800056a:	601a      	str	r2, [r3, #0]

	  for(int i =0; i<10; i++)
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	e014      	b.n	800059c <main+0x64>
	  {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2180      	movs	r1, #128	; 0x80
 8000576:	4831      	ldr	r0, [pc, #196]	; (800063c <main+0x104>)
 8000578:	f000 fd48 	bl	800100c <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 800057c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000580:	f000 fa66 	bl	8000a50 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2180      	movs	r1, #128	; 0x80
 8000588:	482c      	ldr	r0, [pc, #176]	; (800063c <main+0x104>)
 800058a:	f000 fd3f 	bl	800100c <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 800058e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000592:	f000 fa5d 	bl	8000a50 <HAL_Delay>
	  for(int i =0; i<10; i++)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	3301      	adds	r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b09      	cmp	r3, #9
 80005a0:	dde7      	ble.n	8000572 <main+0x3a>
	  }


	  HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  //disable PA0
 80005a2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80005a6:	f000 fd6b 	bl	8001080 <HAL_PWR_DisableWakeUpPin>

	  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80005aa:	4825      	ldr	r0, [pc, #148]	; (8000640 <main+0x108>)
 80005ac:	f001 ff76 	bl	800249c <HAL_RTCEx_DeactivateWakeUpTimer>
  }

  /*Now Enter the standBy mode*/
  /*Clear the WU(Wake Up) FLAG*/
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <main+0xf8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a1e      	ldr	r2, [pc, #120]	; (8000630 <main+0xf8>)
 80005b6:	f043 0304 	orr.w	r3, r3, #4
 80005ba:	6013      	str	r3, [r2, #0]

  /*Clear the RTC(Wake Up) FLAG*/
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80005bc:	4b20      	ldr	r3, [pc, #128]	; (8000640 <main+0x108>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <main+0x108>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80005cc:	60da      	str	r2, [r3, #12]


  PWRstatus = "Enter to standby mode";
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <main+0xfc>)
 80005d0:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <main+0x10c>)
 80005d2:	601a      	str	r2, [r3, #0]

  for(int i =0; i<10; i++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	e012      	b.n	8000600 <main+0xc8>
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	4817      	ldr	r0, [pc, #92]	; (800063c <main+0x104>)
 80005e0:	f000 fd14 	bl	800100c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80005e4:	2064      	movs	r0, #100	; 0x64
 80005e6:	f000 fa33 	bl	8000a50 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	4813      	ldr	r0, [pc, #76]	; (800063c <main+0x104>)
 80005f0:	f000 fd0c 	bl	800100c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80005f4:	2064      	movs	r0, #100	; 0x64
 80005f6:	f000 fa2b 	bl	8000a50 <HAL_Delay>
  for(int i =0; i<10; i++)
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	3301      	adds	r3, #1
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	2b09      	cmp	r3, #9
 8000604:	dde9      	ble.n	80005da <main+0xa2>
  }

  HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);  //Enable PA0
 8000606:	f44f 7080 	mov.w	r0, #256	; 0x100
 800060a:	f000 fd19 	bl	8001040 <HAL_PWR_EnableWakeUpPin>

  /*Enable RTC Wake up function*/
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x4E20, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800060e:	2200      	movs	r2, #0
 8000610:	f644 6120 	movw	r1, #20000	; 0x4e20
 8000614:	480a      	ldr	r0, [pc, #40]	; (8000640 <main+0x108>)
 8000616:	f001 fe79 	bl	800230c <HAL_RTCEx_SetWakeUpTimer_IT>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <main+0xec>
  {
    Error_Handler();
 8000620:	f000 f8f6 	bl	8000810 <Error_Handler>
  }

  PWRstatus = "Standby mode is On";
 8000624:	4b03      	ldr	r3, [pc, #12]	; (8000634 <main+0xfc>)
 8000626:	4a08      	ldr	r2, [pc, #32]	; (8000648 <main+0x110>)
 8000628:	601a      	str	r2, [r3, #0]

  HAL_PWR_EnterSTANDBYMode();
 800062a:	f000 fd3d 	bl	80010a8 <HAL_PWR_EnterSTANDBYMode>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	e7fe      	b.n	800062e <main+0xf6>
 8000630:	40007000 	.word	0x40007000
 8000634:	20000000 	.word	0x20000000
 8000638:	0800261c 	.word	0x0800261c
 800063c:	40020400 	.word	0x40020400
 8000640:	2000002c 	.word	0x2000002c
 8000644:	08002638 	.word	0x08002638
 8000648:	08002650 	.word	0x08002650

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b0b8      	sub	sp, #224	; 0xe0
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000656:	2234      	movs	r2, #52	; 0x34
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f001 ffc8 	bl	80025f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2290      	movs	r2, #144	; 0x90
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f001 ffb9 	bl	80025f0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067e:	4b30      	ldr	r3, [pc, #192]	; (8000740 <SystemClock_Config+0xf4>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	4a2f      	ldr	r2, [pc, #188]	; (8000740 <SystemClock_Config+0xf4>)
 8000684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000688:	6413      	str	r3, [r2, #64]	; 0x40
 800068a:	4b2d      	ldr	r3, [pc, #180]	; (8000740 <SystemClock_Config+0xf4>)
 800068c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000696:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <SystemClock_Config+0xf8>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800069e:	4a29      	ldr	r2, [pc, #164]	; (8000744 <SystemClock_Config+0xf8>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6013      	str	r3, [r2, #0]
 80006a6:	4b27      	ldr	r3, [pc, #156]	; (8000744 <SystemClock_Config+0xf8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006b2:	230a      	movs	r3, #10
 80006b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006be:	2310      	movs	r3, #16
 80006c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fcff 	bl	80010d8 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006e0:	f000 f896 	bl	8000810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ea:	2300      	movs	r3, #0
 80006ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000702:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000706:	2100      	movs	r1, #0
 8000708:	4618      	mov	r0, r3
 800070a:	f000 ff93 	bl	8001634 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000714:	f000 f87c 	bl	8000810 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000718:	2320      	movs	r3, #32
 800071a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800071c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000722:	f107 0308 	add.w	r3, r7, #8
 8000726:	4618      	mov	r0, r3
 8000728:	f001 f922 	bl	8001970 <HAL_RCCEx_PeriphCLKConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000732:	f000 f86d 	bl	8000810 <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	37e0      	adds	r7, #224	; 0xe0
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800
 8000744:	40007000 	.word	0x40007000

08000748 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_RTC_Init+0x44>)
 800074e:	4a10      	ldr	r2, [pc, #64]	; (8000790 <MX_RTC_Init+0x48>)
 8000750:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_RTC_Init+0x44>)
 8000754:	2200      	movs	r2, #0
 8000756:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_RTC_Init+0x44>)
 800075a:	227f      	movs	r2, #127	; 0x7f
 800075c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_RTC_Init+0x44>)
 8000760:	22ff      	movs	r2, #255	; 0xff
 8000762:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_RTC_Init+0x44>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_RTC_Init+0x44>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_RTC_Init+0x44>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_RTC_Init+0x44>)
 8000778:	f001 fd20 	bl	80021bc <HAL_RTC_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000782:	f000 f845 	bl	8000810 <Error_Handler>
  */
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	2000002c 	.word	0x2000002c
 8000790:	40002800 	.word	0x40002800

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]
 80007a6:	60da      	str	r2, [r3, #12]
 80007a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b17      	ldr	r3, [pc, #92]	; (8000808 <MX_GPIO_Init+0x74>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a16      	ldr	r2, [pc, #88]	; (8000808 <MX_GPIO_Init+0x74>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_GPIO_Init+0x74>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_GPIO_Init+0x74>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a10      	ldr	r2, [pc, #64]	; (8000808 <MX_GPIO_Init+0x74>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_GPIO_Init+0x74>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	480b      	ldr	r0, [pc, #44]	; (800080c <MX_GPIO_Init+0x78>)
 80007e0:	f000 fc14 	bl	800100c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_GPIO_Init+0x78>)
 80007fc:	f000 fa5c 	bl	8000cb8 <HAL_GPIO_Init>

}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40020400 	.word	0x40020400

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_MspInit+0x44>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_MspInit+0x44>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <HAL_MspInit+0x44>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_MspInit+0x44>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_MspInit+0x44>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_MspInit+0x44>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800

08000868 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <HAL_RTC_MspInit+0x38>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d10d      	bne.n	8000896 <HAL_RTC_MspInit+0x2e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800087a:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <HAL_RTC_MspInit+0x3c>)
 800087c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800087e:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <HAL_RTC_MspInit+0x3c>)
 8000880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000884:	6713      	str	r3, [r2, #112]	; 0x70
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	2100      	movs	r1, #0
 800088a:	2003      	movs	r0, #3
 800088c:	f000 f9dd 	bl	8000c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8000890:	2003      	movs	r0, #3
 8000892:	f000 f9f6 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40002800 	.word	0x40002800
 80008a4:	40023800 	.word	0x40023800

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 f888 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 22.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <RTC_WKUP_IRQHandler+0x10>)
 800090a:	f001 fe1f 	bl	800254c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000002c 	.word	0x2000002c

08000918 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <SystemInit+0x28>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000922:	4a07      	ldr	r2, [pc, #28]	; (8000940 <SystemInit+0x28>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800092c:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SystemInit+0x28>)
 800092e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000932:	609a      	str	r2, [r3, #8]
#endif
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800097c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000948:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800094a:	e003      	b.n	8000954 <LoopCopyDataInit>

0800094c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800094e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000950:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000952:	3104      	adds	r1, #4

08000954 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000958:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800095a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800095c:	d3f6      	bcc.n	800094c <CopyDataInit>
  ldr  r2, =_sbss
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000960:	e002      	b.n	8000968 <LoopFillZerobss>

08000962 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000962:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000964:	f842 3b04 	str.w	r3, [r2], #4

08000968 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800096a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800096c:	d3f9      	bcc.n	8000962 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800096e:	f7ff ffd3 	bl	8000918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000972:	f001 fe19 	bl	80025a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000976:	f7ff fddf 	bl	8000538 <main>
  bx  lr    
 800097a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800097c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000980:	08002684 	.word	0x08002684
  ldr  r0, =_sdata
 8000984:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000988:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800098c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000990:	20000050 	.word	0x20000050

08000994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC_IRQHandler>

08000996 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099a:	2003      	movs	r0, #3
 800099c:	f000 f94a 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a0:	2000      	movs	r0, #0
 80009a2:	f000 f805 	bl	80009b0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80009a6:	f7ff ff3b 	bl	8000820 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_InitTick+0x54>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x58>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f965 	bl	8000c9e <HAL_SYSTICK_Config>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e00e      	b.n	80009fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d80a      	bhi.n	80009fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f000 f92d 	bl	8000c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <HAL_InitTick+0x5c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000004 	.word	0x20000004
 8000a08:	2000000c 	.word	0x2000000c
 8000a0c:	20000008 	.word	0x20000008

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	2000000c 	.word	0x2000000c
 8000a34:	2000004c 	.word	0x2000004c

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	2000004c 	.word	0x2000004c

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff ffee 	bl	8000a38 <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_Delay+0x40>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffde 	bl	8000a38 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2000000c 	.word	0x2000000c

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac2:	4a04      	ldr	r2, [pc, #16]	; (8000ad4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	60d3      	str	r3, [r2, #12]
}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00
 8000ad8:	05fa0000 	.word	0x05fa0000

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db0b      	blt.n	8000b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4907      	ldr	r1, [pc, #28]	; (8000b30 <__NVIC_EnableIRQ+0x38>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f7ff ff8e 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff29 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff3e 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff8e 	bl	8000b88 <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff31 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffa2 	bl	8000bf0 <SysTick_Config>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
 8000cd6:	e175      	b.n	8000fc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000cd8:	2201      	movs	r2, #1
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f040 8164 	bne.w	8000fbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d00b      	beq.n	8000d16 <HAL_GPIO_Init+0x5e>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d007      	beq.n	8000d16 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d0a:	2b11      	cmp	r3, #17
 8000d0c:	d003      	beq.n	8000d16 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b12      	cmp	r3, #18
 8000d14:	d130      	bne.n	8000d78 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	091b      	lsrs	r3, r3, #4
 8000d62:	f003 0201 	and.w	r2, r3, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d003      	beq.n	8000db8 <HAL_GPIO_Init+0x100>
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2b12      	cmp	r3, #18
 8000db6:	d123      	bne.n	8000e00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	08da      	lsrs	r2, r3, #3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3208      	adds	r2, #8
 8000dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	691a      	ldr	r2, [r3, #16]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	08da      	lsrs	r2, r3, #3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3208      	adds	r2, #8
 8000dfa:	69b9      	ldr	r1, [r7, #24]
 8000dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0203 	and.w	r2, r3, #3
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 80be 	beq.w	8000fbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	4b65      	ldr	r3, [pc, #404]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a64      	ldr	r2, [pc, #400]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b62      	ldr	r3, [pc, #392]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000e5a:	4a60      	ldr	r2, [pc, #384]	; (8000fdc <HAL_GPIO_Init+0x324>)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a57      	ldr	r2, [pc, #348]	; (8000fe0 <HAL_GPIO_Init+0x328>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d037      	beq.n	8000ef6 <HAL_GPIO_Init+0x23e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a56      	ldr	r2, [pc, #344]	; (8000fe4 <HAL_GPIO_Init+0x32c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d031      	beq.n	8000ef2 <HAL_GPIO_Init+0x23a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a55      	ldr	r2, [pc, #340]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d02b      	beq.n	8000eee <HAL_GPIO_Init+0x236>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a54      	ldr	r2, [pc, #336]	; (8000fec <HAL_GPIO_Init+0x334>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d025      	beq.n	8000eea <HAL_GPIO_Init+0x232>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a53      	ldr	r2, [pc, #332]	; (8000ff0 <HAL_GPIO_Init+0x338>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d01f      	beq.n	8000ee6 <HAL_GPIO_Init+0x22e>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a52      	ldr	r2, [pc, #328]	; (8000ff4 <HAL_GPIO_Init+0x33c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d019      	beq.n	8000ee2 <HAL_GPIO_Init+0x22a>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a51      	ldr	r2, [pc, #324]	; (8000ff8 <HAL_GPIO_Init+0x340>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d013      	beq.n	8000ede <HAL_GPIO_Init+0x226>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a50      	ldr	r2, [pc, #320]	; (8000ffc <HAL_GPIO_Init+0x344>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x222>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4f      	ldr	r2, [pc, #316]	; (8001000 <HAL_GPIO_Init+0x348>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x21e>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a4e      	ldr	r2, [pc, #312]	; (8001004 <HAL_GPIO_Init+0x34c>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x21a>
 8000ece:	2309      	movs	r3, #9
 8000ed0:	e012      	b.n	8000ef8 <HAL_GPIO_Init+0x240>
 8000ed2:	230a      	movs	r3, #10
 8000ed4:	e010      	b.n	8000ef8 <HAL_GPIO_Init+0x240>
 8000ed6:	2308      	movs	r3, #8
 8000ed8:	e00e      	b.n	8000ef8 <HAL_GPIO_Init+0x240>
 8000eda:	2307      	movs	r3, #7
 8000edc:	e00c      	b.n	8000ef8 <HAL_GPIO_Init+0x240>
 8000ede:	2306      	movs	r3, #6
 8000ee0:	e00a      	b.n	8000ef8 <HAL_GPIO_Init+0x240>
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	e008      	b.n	8000ef8 <HAL_GPIO_Init+0x240>
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	e006      	b.n	8000ef8 <HAL_GPIO_Init+0x240>
 8000eea:	2303      	movs	r3, #3
 8000eec:	e004      	b.n	8000ef8 <HAL_GPIO_Init+0x240>
 8000eee:	2302      	movs	r3, #2
 8000ef0:	e002      	b.n	8000ef8 <HAL_GPIO_Init+0x240>
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e000      	b.n	8000ef8 <HAL_GPIO_Init+0x240>
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	69fa      	ldr	r2, [r7, #28]
 8000efa:	f002 0203 	and.w	r2, r2, #3
 8000efe:	0092      	lsls	r2, r2, #2
 8000f00:	4093      	lsls	r3, r2
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f08:	4934      	ldr	r1, [pc, #208]	; (8000fdc <HAL_GPIO_Init+0x324>)
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f16:	4b3c      	ldr	r3, [pc, #240]	; (8001008 <HAL_GPIO_Init+0x350>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f3a:	4a33      	ldr	r2, [pc, #204]	; (8001008 <HAL_GPIO_Init+0x350>)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f40:	4b31      	ldr	r3, [pc, #196]	; (8001008 <HAL_GPIO_Init+0x350>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f64:	4a28      	ldr	r2, [pc, #160]	; (8001008 <HAL_GPIO_Init+0x350>)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <HAL_GPIO_Init+0x350>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <HAL_GPIO_Init+0x350>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <HAL_GPIO_Init+0x350>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb8:	4a13      	ldr	r2, [pc, #76]	; (8001008 <HAL_GPIO_Init+0x350>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	2b0f      	cmp	r3, #15
 8000fc8:	f67f ae86 	bls.w	8000cd8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3724      	adds	r7, #36	; 0x24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40013800 	.word	0x40013800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	40020400 	.word	0x40020400
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	40020c00 	.word	0x40020c00
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40021400 	.word	0x40021400
 8000ff8:	40021800 	.word	0x40021800
 8000ffc:	40021c00 	.word	0x40021c00
 8001000:	40022000 	.word	0x40022000
 8001004:	40022400 	.word	0x40022400
 8001008:	40013c00 	.word	0x40013c00

0800100c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
 8001018:	4613      	mov	r3, r2
 800101a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001022:	887a      	ldrh	r2, [r7, #2]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001028:	e003      	b.n	8001032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	041a      	lsls	r2, r3, #16
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	619a      	str	r2, [r3, #24]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN6_HIGH or PWR_WAKEUP_PIN6_LOW 
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.               
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));
  
  /* Enable wake-up pin */
  SET_BIT(PWR->CSR2, (PWR_EWUP_MASK & WakeUpPinPolarity));
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_PWR_EnableWakeUpPin+0x3c>)
 800104a:	68da      	ldr	r2, [r3, #12]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8001052:	490a      	ldr	r1, [pc, #40]	; (800107c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001054:	4313      	orrs	r3, r2
 8001056:	60cb      	str	r3, [r1, #12]
	
  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR2, (PWR_EWUP_MASK & WakeUpPinPolarity), (WakeUpPinPolarity >> 0x06));
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_PWR_EnableWakeUpPin+0x3c>)
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8001062:	43db      	mvns	r3, r3
 8001064:	401a      	ands	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	099b      	lsrs	r3, r3, #6
 800106a:	4904      	ldr	r1, [pc, #16]	; (800107c <HAL_PWR_EnableWakeUpPin+0x3c>)
 800106c:	4313      	orrs	r3, r2
 800106e:	608b      	str	r3, [r1, #8]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40007000 	.word	0x40007000

08001080 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN5
  *           @arg PWR_WAKEUP_PIN6 
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CSR2, WakeUpPinx);
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_PWR_DisableWakeUpPin+0x24>)
 800108a:	68da      	ldr	r2, [r3, #12]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	43db      	mvns	r3, r3
 8001090:	4904      	ldr	r1, [pc, #16]	; (80010a4 <HAL_PWR_DisableWakeUpPin+0x24>)
 8001092:	4013      	ands	r3, r2
 8001094:	60cb      	str	r3, [r1, #12]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	40007000 	.word	0x40007000

080010a8 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pins if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  PWR->CR1 |= PWR_CR1_PDDS;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a07      	ldr	r2, [pc, #28]	; (80010d0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80010b2:	f043 0302 	orr.w	r3, r3, #2
 80010b6:	6013      	str	r3, [r2, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80010c4:	bf30      	wfi
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40007000 	.word	0x40007000
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e29b      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f000 8087 	beq.w	800120a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010fc:	4b96      	ldr	r3, [pc, #600]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 030c 	and.w	r3, r3, #12
 8001104:	2b04      	cmp	r3, #4
 8001106:	d00c      	beq.n	8001122 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001108:	4b93      	ldr	r3, [pc, #588]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f003 030c 	and.w	r3, r3, #12
 8001110:	2b08      	cmp	r3, #8
 8001112:	d112      	bne.n	800113a <HAL_RCC_OscConfig+0x62>
 8001114:	4b90      	ldr	r3, [pc, #576]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800111c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001120:	d10b      	bne.n	800113a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001122:	4b8d      	ldr	r3, [pc, #564]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d06c      	beq.n	8001208 <HAL_RCC_OscConfig+0x130>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d168      	bne.n	8001208 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e275      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001142:	d106      	bne.n	8001152 <HAL_RCC_OscConfig+0x7a>
 8001144:	4b84      	ldr	r3, [pc, #528]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a83      	ldr	r2, [pc, #524]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800114a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	e02e      	b.n	80011b0 <HAL_RCC_OscConfig+0xd8>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10c      	bne.n	8001174 <HAL_RCC_OscConfig+0x9c>
 800115a:	4b7f      	ldr	r3, [pc, #508]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a7e      	ldr	r2, [pc, #504]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	4b7c      	ldr	r3, [pc, #496]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a7b      	ldr	r2, [pc, #492]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800116c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e01d      	b.n	80011b0 <HAL_RCC_OscConfig+0xd8>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800117c:	d10c      	bne.n	8001198 <HAL_RCC_OscConfig+0xc0>
 800117e:	4b76      	ldr	r3, [pc, #472]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a75      	ldr	r2, [pc, #468]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	4b73      	ldr	r3, [pc, #460]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a72      	ldr	r2, [pc, #456]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	e00b      	b.n	80011b0 <HAL_RCC_OscConfig+0xd8>
 8001198:	4b6f      	ldr	r3, [pc, #444]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a6e      	ldr	r2, [pc, #440]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800119e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b6c      	ldr	r3, [pc, #432]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a6b      	ldr	r2, [pc, #428]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80011aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d013      	beq.n	80011e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011b8:	f7ff fc3e 	bl	8000a38 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c0:	f7ff fc3a 	bl	8000a38 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b64      	cmp	r3, #100	; 0x64
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e229      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d2:	4b61      	ldr	r3, [pc, #388]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f0      	beq.n	80011c0 <HAL_RCC_OscConfig+0xe8>
 80011de:	e014      	b.n	800120a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e0:	f7ff fc2a 	bl	8000a38 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fc26 	bl	8000a38 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	; 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e215      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	4b57      	ldr	r3, [pc, #348]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x110>
 8001206:	e000      	b.n	800120a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d069      	beq.n	80012ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001216:	4b50      	ldr	r3, [pc, #320]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001222:	4b4d      	ldr	r3, [pc, #308]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b08      	cmp	r3, #8
 800122c:	d11c      	bne.n	8001268 <HAL_RCC_OscConfig+0x190>
 800122e:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d116      	bne.n	8001268 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123a:	4b47      	ldr	r3, [pc, #284]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d005      	beq.n	8001252 <HAL_RCC_OscConfig+0x17a>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d001      	beq.n	8001252 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e1e9      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	4b41      	ldr	r3, [pc, #260]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	493d      	ldr	r1, [pc, #244]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001262:	4313      	orrs	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001266:	e040      	b.n	80012ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d023      	beq.n	80012b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001270:	4b39      	ldr	r3, [pc, #228]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a38      	ldr	r2, [pc, #224]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff fbdc 	bl	8000a38 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001284:	f7ff fbd8 	bl	8000a38 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e1c7      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4929      	ldr	r1, [pc, #164]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
 80012b6:	e018      	b.n	80012ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b8:	4b27      	ldr	r3, [pc, #156]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a26      	ldr	r2, [pc, #152]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80012be:	f023 0301 	bic.w	r3, r3, #1
 80012c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fbb8 	bl	8000a38 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012cc:	f7ff fbb4 	bl	8000a38 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e1a3      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0308 	and.w	r3, r3, #8
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d038      	beq.n	8001368 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d019      	beq.n	8001332 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001302:	4a15      	ldr	r2, [pc, #84]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800130a:	f7ff fb95 	bl	8000a38 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001312:	f7ff fb91 	bl	8000a38 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e180      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x23a>
 8001330:	e01a      	b.n	8001368 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001334:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_RCC_OscConfig+0x280>)
 8001338:	f023 0301 	bic.w	r3, r3, #1
 800133c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133e:	f7ff fb7b 	bl	8000a38 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff fb77 	bl	8000a38 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d903      	bls.n	800135c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e166      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
 8001358:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135c:	4b92      	ldr	r3, [pc, #584]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800135e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1ee      	bne.n	8001346 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 80a4 	beq.w	80014be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001376:	4b8c      	ldr	r3, [pc, #560]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d10d      	bne.n	800139e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b89      	ldr	r3, [pc, #548]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a88      	ldr	r2, [pc, #544]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40
 800138e:	4b86      	ldr	r3, [pc, #536]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800139a:	2301      	movs	r3, #1
 800139c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800139e:	4b83      	ldr	r3, [pc, #524]	; (80015ac <HAL_RCC_OscConfig+0x4d4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d118      	bne.n	80013dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80013aa:	4b80      	ldr	r3, [pc, #512]	; (80015ac <HAL_RCC_OscConfig+0x4d4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a7f      	ldr	r2, [pc, #508]	; (80015ac <HAL_RCC_OscConfig+0x4d4>)
 80013b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fb3f 	bl	8000a38 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013be:	f7ff fb3b 	bl	8000a38 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b64      	cmp	r3, #100	; 0x64
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e12a      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013d0:	4b76      	ldr	r3, [pc, #472]	; (80015ac <HAL_RCC_OscConfig+0x4d4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d106      	bne.n	80013f2 <HAL_RCC_OscConfig+0x31a>
 80013e4:	4b70      	ldr	r3, [pc, #448]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80013e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e8:	4a6f      	ldr	r2, [pc, #444]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6713      	str	r3, [r2, #112]	; 0x70
 80013f0:	e02d      	b.n	800144e <HAL_RCC_OscConfig+0x376>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d10c      	bne.n	8001414 <HAL_RCC_OscConfig+0x33c>
 80013fa:	4b6b      	ldr	r3, [pc, #428]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fe:	4a6a      	ldr	r2, [pc, #424]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001400:	f023 0301 	bic.w	r3, r3, #1
 8001404:	6713      	str	r3, [r2, #112]	; 0x70
 8001406:	4b68      	ldr	r3, [pc, #416]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	4a67      	ldr	r2, [pc, #412]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800140c:	f023 0304 	bic.w	r3, r3, #4
 8001410:	6713      	str	r3, [r2, #112]	; 0x70
 8001412:	e01c      	b.n	800144e <HAL_RCC_OscConfig+0x376>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b05      	cmp	r3, #5
 800141a:	d10c      	bne.n	8001436 <HAL_RCC_OscConfig+0x35e>
 800141c:	4b62      	ldr	r3, [pc, #392]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001420:	4a61      	ldr	r2, [pc, #388]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	6713      	str	r3, [r2, #112]	; 0x70
 8001428:	4b5f      	ldr	r3, [pc, #380]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800142a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142c:	4a5e      	ldr	r2, [pc, #376]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6713      	str	r3, [r2, #112]	; 0x70
 8001434:	e00b      	b.n	800144e <HAL_RCC_OscConfig+0x376>
 8001436:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143a:	4a5b      	ldr	r2, [pc, #364]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	6713      	str	r3, [r2, #112]	; 0x70
 8001442:	4b59      	ldr	r3, [pc, #356]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	4a58      	ldr	r2, [pc, #352]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001448:	f023 0304 	bic.w	r3, r3, #4
 800144c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d015      	beq.n	8001482 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001456:	f7ff faef 	bl	8000a38 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145c:	e00a      	b.n	8001474 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145e:	f7ff faeb 	bl	8000a38 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	f241 3288 	movw	r2, #5000	; 0x1388
 800146c:	4293      	cmp	r3, r2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e0d8      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001474:	4b4c      	ldr	r3, [pc, #304]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d0ee      	beq.n	800145e <HAL_RCC_OscConfig+0x386>
 8001480:	e014      	b.n	80014ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001482:	f7ff fad9 	bl	8000a38 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001488:	e00a      	b.n	80014a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fad5 	bl	8000a38 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	f241 3288 	movw	r2, #5000	; 0x1388
 8001498:	4293      	cmp	r3, r2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e0c2      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a0:	4b41      	ldr	r3, [pc, #260]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80014a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1ee      	bne.n	800148a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014ac:	7dfb      	ldrb	r3, [r7, #23]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d105      	bne.n	80014be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b2:	4b3d      	ldr	r3, [pc, #244]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a3c      	ldr	r2, [pc, #240]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80014b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80ae 	beq.w	8001624 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014c8:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b08      	cmp	r3, #8
 80014d2:	d06d      	beq.n	80015b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d14b      	bne.n	8001574 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014dc:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a31      	ldr	r2, [pc, #196]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 80014e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff faa6 	bl	8000a38 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014f0:	f7ff faa2 	bl	8000a38 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e091      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69da      	ldr	r2, [r3, #28]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	019b      	lsls	r3, r3, #6
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001524:	085b      	lsrs	r3, r3, #1
 8001526:	3b01      	subs	r3, #1
 8001528:	041b      	lsls	r3, r3, #16
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001530:	061b      	lsls	r3, r3, #24
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	071b      	lsls	r3, r3, #28
 800153a:	491b      	ldr	r1, [pc, #108]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800154a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154c:	f7ff fa74 	bl	8000a38 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff fa70 	bl	8000a38 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e05f      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x47c>
 8001572:	e057      	b.n	8001624 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800157a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800157e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fa5a 	bl	8000a38 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff fa56 	bl	8000a38 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e045      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_RCC_OscConfig+0x4d0>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x4b0>
 80015a6:	e03d      	b.n	8001624 <HAL_RCC_OscConfig+0x54c>
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80015b0:	4b1f      	ldr	r3, [pc, #124]	; (8001630 <HAL_RCC_OscConfig+0x558>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d030      	beq.n	8001620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d129      	bne.n	8001620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d122      	bne.n	8001620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015e0:	4013      	ands	r3, r2
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d119      	bne.n	8001620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	085b      	lsrs	r3, r3, #1
 80015f8:	3b01      	subs	r3, #1
 80015fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d10f      	bne.n	8001620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800160a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d107      	bne.n	8001620 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800161c:	429a      	cmp	r2, r3
 800161e:	d001      	beq.n	8001624 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800

08001634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e0d0      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800164c:	4b6a      	ldr	r3, [pc, #424]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 030f 	and.w	r3, r3, #15
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d910      	bls.n	800167c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b67      	ldr	r3, [pc, #412]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 020f 	bic.w	r2, r3, #15
 8001662:	4965      	ldr	r1, [pc, #404]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0b8      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001694:	4b59      	ldr	r3, [pc, #356]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a58      	ldr	r2, [pc, #352]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 800169a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800169e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a52      	ldr	r2, [pc, #328]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80016b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b50      	ldr	r3, [pc, #320]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	494d      	ldr	r1, [pc, #308]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d040      	beq.n	8001758 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b47      	ldr	r3, [pc, #284]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d115      	bne.n	8001716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e07f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016f6:	4b41      	ldr	r3, [pc, #260]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d109      	bne.n	8001716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e073      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e06b      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001716:	4b39      	ldr	r3, [pc, #228]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f023 0203 	bic.w	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4936      	ldr	r1, [pc, #216]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 8001724:	4313      	orrs	r3, r2
 8001726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001728:	f7ff f986 	bl	8000a38 <HAL_GetTick>
 800172c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800172e:	e00a      	b.n	8001746 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001730:	f7ff f982 	bl	8000a38 <HAL_GetTick>
 8001734:	4602      	mov	r2, r0
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	1ad3      	subs	r3, r2, r3
 800173a:	f241 3288 	movw	r2, #5000	; 0x1388
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e053      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	4b2d      	ldr	r3, [pc, #180]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 020c 	and.w	r2, r3, #12
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	429a      	cmp	r2, r3
 8001756:	d1eb      	bne.n	8001730 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001758:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d210      	bcs.n	8001788 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f023 020f 	bic.w	r2, r3, #15
 800176e:	4922      	ldr	r1, [pc, #136]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_RCC_ClockConfig+0x1c4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e032      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4916      	ldr	r1, [pc, #88]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	490e      	ldr	r1, [pc, #56]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017c6:	f000 f821 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017ca:	4601      	mov	r1, r0
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_ClockConfig+0x1c8>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	4a0a      	ldr	r2, [pc, #40]	; (8001800 <HAL_RCC_ClockConfig+0x1cc>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	fa21 f303 	lsr.w	r3, r1, r3
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_RCC_ClockConfig+0x1d0>)
 80017e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1d4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f8e2 	bl	80009b0 <HAL_InitTick>

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023c00 	.word	0x40023c00
 80017fc:	40023800 	.word	0x40023800
 8001800:	08002664 	.word	0x08002664
 8001804:	20000004 	.word	0x20000004
 8001808:	20000008 	.word	0x20000008

0800180c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	2300      	movs	r3, #0
 800181c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001822:	4b50      	ldr	r3, [pc, #320]	; (8001964 <HAL_RCC_GetSysClockFreq+0x158>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b04      	cmp	r3, #4
 800182c:	d007      	beq.n	800183e <HAL_RCC_GetSysClockFreq+0x32>
 800182e:	2b08      	cmp	r3, #8
 8001830:	d008      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x38>
 8001832:	2b00      	cmp	r3, #0
 8001834:	f040 808d 	bne.w	8001952 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001838:	4b4b      	ldr	r3, [pc, #300]	; (8001968 <HAL_RCC_GetSysClockFreq+0x15c>)
 800183a:	60bb      	str	r3, [r7, #8]
      break;
 800183c:	e08c      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800183e:	4b4b      	ldr	r3, [pc, #300]	; (800196c <HAL_RCC_GetSysClockFreq+0x160>)
 8001840:	60bb      	str	r3, [r7, #8]
      break;
 8001842:	e089      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001844:	4b47      	ldr	r3, [pc, #284]	; (8001964 <HAL_RCC_GetSysClockFreq+0x158>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800184c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800184e:	4b45      	ldr	r3, [pc, #276]	; (8001964 <HAL_RCC_GetSysClockFreq+0x158>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d023      	beq.n	80018a2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185a:	4b42      	ldr	r3, [pc, #264]	; (8001964 <HAL_RCC_GetSysClockFreq+0x158>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	099b      	lsrs	r3, r3, #6
 8001860:	f04f 0400 	mov.w	r4, #0
 8001864:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	ea03 0501 	and.w	r5, r3, r1
 8001870:	ea04 0602 	and.w	r6, r4, r2
 8001874:	4a3d      	ldr	r2, [pc, #244]	; (800196c <HAL_RCC_GetSysClockFreq+0x160>)
 8001876:	fb02 f106 	mul.w	r1, r2, r6
 800187a:	2200      	movs	r2, #0
 800187c:	fb02 f205 	mul.w	r2, r2, r5
 8001880:	440a      	add	r2, r1
 8001882:	493a      	ldr	r1, [pc, #232]	; (800196c <HAL_RCC_GetSysClockFreq+0x160>)
 8001884:	fba5 0101 	umull	r0, r1, r5, r1
 8001888:	1853      	adds	r3, r2, r1
 800188a:	4619      	mov	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f04f 0400 	mov.w	r4, #0
 8001892:	461a      	mov	r2, r3
 8001894:	4623      	mov	r3, r4
 8001896:	f7fe fccf 	bl	8000238 <__aeabi_uldivmod>
 800189a:	4603      	mov	r3, r0
 800189c:	460c      	mov	r4, r1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e049      	b.n	8001936 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018a2:	4b30      	ldr	r3, [pc, #192]	; (8001964 <HAL_RCC_GetSysClockFreq+0x158>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	099b      	lsrs	r3, r3, #6
 80018a8:	f04f 0400 	mov.w	r4, #0
 80018ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	ea03 0501 	and.w	r5, r3, r1
 80018b8:	ea04 0602 	and.w	r6, r4, r2
 80018bc:	4629      	mov	r1, r5
 80018be:	4632      	mov	r2, r6
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	f04f 0400 	mov.w	r4, #0
 80018c8:	0154      	lsls	r4, r2, #5
 80018ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018ce:	014b      	lsls	r3, r1, #5
 80018d0:	4619      	mov	r1, r3
 80018d2:	4622      	mov	r2, r4
 80018d4:	1b49      	subs	r1, r1, r5
 80018d6:	eb62 0206 	sbc.w	r2, r2, r6
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	f04f 0400 	mov.w	r4, #0
 80018e2:	0194      	lsls	r4, r2, #6
 80018e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018e8:	018b      	lsls	r3, r1, #6
 80018ea:	1a5b      	subs	r3, r3, r1
 80018ec:	eb64 0402 	sbc.w	r4, r4, r2
 80018f0:	f04f 0100 	mov.w	r1, #0
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	00e2      	lsls	r2, r4, #3
 80018fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018fe:	00d9      	lsls	r1, r3, #3
 8001900:	460b      	mov	r3, r1
 8001902:	4614      	mov	r4, r2
 8001904:	195b      	adds	r3, r3, r5
 8001906:	eb44 0406 	adc.w	r4, r4, r6
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	02a2      	lsls	r2, r4, #10
 8001914:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001918:	0299      	lsls	r1, r3, #10
 800191a:	460b      	mov	r3, r1
 800191c:	4614      	mov	r4, r2
 800191e:	4618      	mov	r0, r3
 8001920:	4621      	mov	r1, r4
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f04f 0400 	mov.w	r4, #0
 8001928:	461a      	mov	r2, r3
 800192a:	4623      	mov	r3, r4
 800192c:	f7fe fc84 	bl	8000238 <__aeabi_uldivmod>
 8001930:	4603      	mov	r3, r0
 8001932:	460c      	mov	r4, r1
 8001934:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_GetSysClockFreq+0x158>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	0c1b      	lsrs	r3, r3, #16
 800193c:	f003 0303 	and.w	r3, r3, #3
 8001940:	3301      	adds	r3, #1
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	fbb2 f3f3 	udiv	r3, r2, r3
 800194e:	60bb      	str	r3, [r7, #8]
      break;
 8001950:	e002      	b.n	8001958 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001952:	4b05      	ldr	r3, [pc, #20]	; (8001968 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001954:	60bb      	str	r3, [r7, #8]
      break;
 8001956:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001958:	68bb      	ldr	r3, [r7, #8]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3714      	adds	r7, #20
 800195e:	46bd      	mov	sp, r7
 8001960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	00f42400 	.word	0x00f42400
 800196c:	017d7840 	.word	0x017d7840

08001970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b00      	cmp	r3, #0
 8001996:	d012      	beq.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001998:	4b69      	ldr	r3, [pc, #420]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4a68      	ldr	r2, [pc, #416]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800199e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019a2:	6093      	str	r3, [r2, #8]
 80019a4:	4b66      	ldr	r3, [pc, #408]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ac:	4964      	ldr	r1, [pc, #400]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d017      	beq.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80019ca:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d8:	4959      	ldr	r1, [pc, #356]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019e8:	d101      	bne.n	80019ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d017      	beq.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a06:	4b4e      	ldr	r3, [pc, #312]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a14:	494a      	ldr	r1, [pc, #296]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a24:	d101      	bne.n	8001a2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001a26:	2301      	movs	r3, #1
 8001a28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 808b 	beq.w	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a54:	4b3a      	ldr	r3, [pc, #232]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a39      	ldr	r2, [pc, #228]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a60:	4b37      	ldr	r3, [pc, #220]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a6c:	4b35      	ldr	r3, [pc, #212]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a34      	ldr	r2, [pc, #208]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a78:	f7fe ffde 	bl	8000a38 <HAL_GetTick>
 8001a7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a80:	f7fe ffda 	bl	8000a38 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	; 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e38d      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001a92:	4b2c      	ldr	r3, [pc, #176]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a9e:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aa6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d035      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d02e      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001abc:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ac4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aca:	4a1d      	ldr	r2, [pc, #116]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad6:	4a1a      	ldr	r2, [pc, #104]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001adc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ade:	4a18      	ldr	r2, [pc, #96]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d114      	bne.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7fe ffa2 	bl	8000a38 <HAL_GetTick>
 8001af4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7fe ff9e 	bl	8000a38 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e34f      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0ee      	beq.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b26:	d111      	bne.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001b28:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001b36:	400b      	ands	r3, r1
 8001b38:	4901      	ldr	r1, [pc, #4]	; (8001b40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40007000 	.word	0x40007000
 8001b48:	0ffffcff 	.word	0x0ffffcff
 8001b4c:	4bb3      	ldr	r3, [pc, #716]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	4ab2      	ldr	r2, [pc, #712]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b56:	6093      	str	r3, [r2, #8]
 8001b58:	4bb0      	ldr	r3, [pc, #704]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b64:	49ad      	ldr	r1, [pc, #692]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d010      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b76:	4ba9      	ldr	r3, [pc, #676]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b7c:	4aa7      	ldr	r2, [pc, #668]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b86:	4ba5      	ldr	r3, [pc, #660]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b90:	49a2      	ldr	r1, [pc, #648]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00a      	beq.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ba4:	4b9d      	ldr	r3, [pc, #628]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001baa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bb2:	499a      	ldr	r1, [pc, #616]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00a      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001bc6:	4b95      	ldr	r3, [pc, #596]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bd4:	4991      	ldr	r1, [pc, #580]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00a      	beq.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001be8:	4b8c      	ldr	r3, [pc, #560]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf6:	4989      	ldr	r1, [pc, #548]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d00a      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001c0a:	4b84      	ldr	r3, [pc, #528]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	4980      	ldr	r1, [pc, #512]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00a      	beq.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c2c:	4b7b      	ldr	r3, [pc, #492]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c32:	f023 0203 	bic.w	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4978      	ldr	r1, [pc, #480]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00a      	beq.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c4e:	4b73      	ldr	r3, [pc, #460]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c54:	f023 020c 	bic.w	r2, r3, #12
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5c:	496f      	ldr	r1, [pc, #444]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00a      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c70:	4b6a      	ldr	r3, [pc, #424]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	4967      	ldr	r1, [pc, #412]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00a      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c92:	4b62      	ldr	r3, [pc, #392]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca0:	495e      	ldr	r1, [pc, #376]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00a      	beq.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001cb4:	4b59      	ldr	r3, [pc, #356]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc2:	4956      	ldr	r1, [pc, #344]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00a      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001cd6:	4b51      	ldr	r3, [pc, #324]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cdc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce4:	494d      	ldr	r1, [pc, #308]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00a      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001cf8:	4b48      	ldr	r3, [pc, #288]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cfe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d06:	4945      	ldr	r1, [pc, #276]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00a      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001d1a:	4b40      	ldr	r3, [pc, #256]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d28:	493c      	ldr	r1, [pc, #240]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00a      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d3c:	4b37      	ldr	r3, [pc, #220]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d4a:	4934      	ldr	r1, [pc, #208]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d011      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d5e:	4b2f      	ldr	r3, [pc, #188]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d6c:	492b      	ldr	r1, [pc, #172]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d9e:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dac:	491b      	ldr	r1, [pc, #108]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00b      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001dc0:	4b16      	ldr	r3, [pc, #88]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dd0:	4912      	ldr	r1, [pc, #72]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d00b      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001de4:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001df4:	4909      	ldr	r1, [pc, #36]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00f      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e18:	e002      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	4985      	ldr	r1, [pc, #532]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00b      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001e34:	4b80      	ldr	r3, [pc, #512]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e44:	497c      	ldr	r1, [pc, #496]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d005      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e5a:	f040 80d6 	bne.w	800200a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e5e:	4b76      	ldr	r3, [pc, #472]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a75      	ldr	r2, [pc, #468]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001e68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e6a:	f7fe fde5 	bl	8000a38 <HAL_GetTick>
 8001e6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e72:	f7fe fde1 	bl	8000a38 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b64      	cmp	r3, #100	; 0x64
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e194      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e84:	4b6c      	ldr	r3, [pc, #432]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d021      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d11d      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ea4:	4b64      	ldr	r3, [pc, #400]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eaa:	0c1b      	lsrs	r3, r3, #16
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001eb2:	4b61      	ldr	r3, [pc, #388]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001eb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001eb8:	0e1b      	lsrs	r3, r3, #24
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	019a      	lsls	r2, r3, #6
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	041b      	lsls	r3, r3, #16
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	061b      	lsls	r3, r3, #24
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	071b      	lsls	r3, r3, #28
 8001ed8:	4957      	ldr	r1, [pc, #348]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d004      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ef4:	d00a      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d02e      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f0a:	d129      	bne.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f0c:	4b4a      	ldr	r3, [pc, #296]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f12:	0c1b      	lsrs	r3, r3, #16
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f1a:	4b47      	ldr	r3, [pc, #284]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f20:	0f1b      	lsrs	r3, r3, #28
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	019a      	lsls	r2, r3, #6
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	041b      	lsls	r3, r3, #16
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	061b      	lsls	r3, r3, #24
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	071b      	lsls	r3, r3, #28
 8001f40:	493d      	ldr	r1, [pc, #244]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f48:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f4e:	f023 021f 	bic.w	r2, r3, #31
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	3b01      	subs	r3, #1
 8001f58:	4937      	ldr	r1, [pc, #220]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d01d      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f6c:	4b32      	ldr	r3, [pc, #200]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f72:	0e1b      	lsrs	r3, r3, #24
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f7a:	4b2f      	ldr	r3, [pc, #188]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f80:	0f1b      	lsrs	r3, r3, #28
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	019a      	lsls	r2, r3, #6
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	041b      	lsls	r3, r3, #16
 8001f94:	431a      	orrs	r2, r3
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	061b      	lsls	r3, r3, #24
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	071b      	lsls	r3, r3, #28
 8001fa0:	4925      	ldr	r1, [pc, #148]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d011      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	019a      	lsls	r2, r3, #6
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	041b      	lsls	r3, r3, #16
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	061b      	lsls	r3, r3, #24
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	071b      	lsls	r3, r3, #28
 8001fd0:	4919      	ldr	r1, [pc, #100]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001fd8:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a16      	ldr	r2, [pc, #88]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fe2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe4:	f7fe fd28 	bl	8000a38 <HAL_GetTick>
 8001fe8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001fec:	f7fe fd24 	bl	8000a38 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	; 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e0d7      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	2b01      	cmp	r3, #1
 800200e:	f040 80cd 	bne.w	80021ac <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800201e:	f7fe fd0b 	bl	8000a38 <HAL_GetTick>
 8002022:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002026:	f7fe fd07 	bl	8000a38 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b64      	cmp	r3, #100	; 0x64
 8002032:	d903      	bls.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e0ba      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002038:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800203c:	4b5e      	ldr	r3, [pc, #376]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002048:	d0ed      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002066:	2b00      	cmp	r3, #0
 8002068:	d02e      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d12a      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002072:	4b51      	ldr	r3, [pc, #324]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002078:	0c1b      	lsrs	r3, r3, #16
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002080:	4b4d      	ldr	r3, [pc, #308]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	0f1b      	lsrs	r3, r3, #28
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	019a      	lsls	r2, r3, #6
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	041b      	lsls	r3, r3, #16
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	061b      	lsls	r3, r3, #24
 80020a0:	431a      	orrs	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	071b      	lsls	r3, r3, #28
 80020a6:	4944      	ldr	r1, [pc, #272]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80020ae:	4b42      	ldr	r3, [pc, #264]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020bc:	3b01      	subs	r3, #1
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	493d      	ldr	r1, [pc, #244]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d022      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020dc:	d11d      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020de:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e4:	0e1b      	lsrs	r3, r3, #24
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80020ec:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f2:	0f1b      	lsrs	r3, r3, #28
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	019a      	lsls	r2, r3, #6
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	041b      	lsls	r3, r3, #16
 8002106:	431a      	orrs	r2, r3
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	061b      	lsls	r3, r3, #24
 800210c:	431a      	orrs	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	071b      	lsls	r3, r3, #28
 8002112:	4929      	ldr	r1, [pc, #164]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d028      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002126:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212c:	0e1b      	lsrs	r3, r3, #24
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002134:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	0c1b      	lsrs	r3, r3, #16
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	019a      	lsls	r2, r3, #6
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	041b      	lsls	r3, r3, #16
 800214c:	431a      	orrs	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	061b      	lsls	r3, r3, #24
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	071b      	lsls	r3, r3, #28
 800215a:	4917      	ldr	r1, [pc, #92]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002168:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002170:	4911      	ldr	r1, [pc, #68]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002172:	4313      	orrs	r3, r2
 8002174:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800217e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002182:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002184:	f7fe fc58 	bl	8000a38 <HAL_GetTick>
 8002188:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800218c:	f7fe fc54 	bl	8000a38 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e007      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021aa:	d1ef      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3720      	adds	r7, #32
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40023800 	.word	0x40023800

080021bc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e06b      	b.n	80022a6 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7f5b      	ldrb	r3, [r3, #29]
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d105      	bne.n	80021e4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fb42 	bl	8000868 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	22ca      	movs	r2, #202	; 0xca
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2253      	movs	r2, #83	; 0x53
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f85a 	bl	80022b4 <RTC_EnterInitMode>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d008      	beq.n	8002218 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	22ff      	movs	r2, #255	; 0xff
 800220c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2204      	movs	r2, #4
 8002212:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e046      	b.n	80022a6 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6899      	ldr	r1, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <HAL_RTC_Init+0xf4>)
 8002224:	400b      	ands	r3, r1
 8002226:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6899      	ldr	r1, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68d2      	ldr	r2, [r2, #12]
 800224e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6919      	ldr	r1, [r3, #16]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	041a      	lsls	r2, r3, #16
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002272:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0208 	bic.w	r2, r2, #8
 8002282:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699a      	ldr	r2, [r3, #24]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	22ff      	movs	r2, #255	; 0xff
 800229c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80022a4:	2300      	movs	r3, #0
  }
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	ff8fffbf 	.word	0xff8fffbf

080022b4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d119      	bne.n	8002302 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f04f 32ff 	mov.w	r2, #4294967295
 80022d6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022d8:	f7fe fbae 	bl	8000a38 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80022de:	e009      	b.n	80022f4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80022e0:	f7fe fbaa 	bl	8000a38 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80022ee:	d901      	bls.n	80022f4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e007      	b.n	8002304 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0ee      	beq.n	80022e0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	7f1b      	ldrb	r3, [r3, #28]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d101      	bne.n	8002324 <HAL_RTCEx_SetWakeUpTimer_IT+0x18>
 8002320:	2302      	movs	r3, #2
 8002322:	e0ae      	b.n	8002482 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2201      	movs	r2, #1
 8002328:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2202      	movs	r2, #2
 800232e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	22ca      	movs	r2, #202	; 0xca
 8002336:	625a      	str	r2, [r3, #36]	; 0x24
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2253      	movs	r2, #83	; 0x53
 800233e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800234e:	609a      	str	r2, [r3, #8]

  /* Check RTC WUTWF flag is reset only when wake up timer enabled */
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235a:	2b00      	cmp	r3, #0
 800235c:	d022      	beq.n	80023a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x98>
  {
    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 800235e:	4b4c      	ldr	r3, [pc, #304]	; (8002490 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a4c      	ldr	r2, [pc, #304]	; (8002494 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	0adb      	lsrs	r3, r3, #11
 800236a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	617b      	str	r3, [r7, #20]
    do
    {
      if(count-- == 0U)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	1e5a      	subs	r2, r3, #1
 8002378:	617a      	str	r2, [r7, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10b      	bne.n	8002396 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	22ff      	movs	r2, #255	; 0xff
 8002384:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2203      	movs	r2, #3
 800238a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e075      	b.n	8002482 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
      }
    }
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == SET);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1e7      	bne.n	8002374 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b2:	609a      	str	r2, [r3, #8]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U);
 80023b4:	4b36      	ldr	r3, [pc, #216]	; (8002490 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a36      	ldr	r2, [pc, #216]	; (8002494 <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 80023ba:	fba2 2303 	umull	r2, r3, r2, r3
 80023be:	0adb      	lsrs	r3, r3, #11
 80023c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023c4:	fb02 f303 	mul.w	r3, r2, r3
 80023c8:	617b      	str	r3, [r7, #20]
  do
  {
    if(count-- == 0U)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	1e5a      	subs	r2, r3, #1
 80023ce:	617a      	str	r2, [r7, #20]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10b      	bne.n	80023ec <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	22ff      	movs	r2, #255	; 0xff
 80023da:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2203      	movs	r2, #3
 80023e0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e04a      	b.n	8002482 <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    }
  }
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0e7      	beq.n	80023ca <HAL_RTCEx_SetWakeUpTimer_IT+0xbe>

  /* Configure the Wake-up Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0207 	bic.w	r2, r2, #7
 8002410:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6899      	ldr	r1, [r3, #8]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a1c      	ldr	r2, [pc, #112]	; (8002498 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8002428:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800242c:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT;
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	4a19      	ldr	r2, [pc, #100]	; (8002498 <HAL_RTCEx_SetWakeUpTimer_IT+0x18c>)
 8002434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002438:	6093      	str	r3, [r2, #8]

  /* Clear RTC Wake Up timer Flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800244a:	60da      	str	r2, [r3, #12]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800245a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800246a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	22ff      	movs	r2, #255	; 0xff
 8002472:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2201      	movs	r2, #1
 8002478:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	371c      	adds	r7, #28
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000004 	.word	0x20000004
 8002494:	10624dd3 	.word	0x10624dd3
 8002498:	40013c00 	.word	0x40013c00

0800249c <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
uint32_t HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7f1b      	ldrb	r3, [r3, #28]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_RTCEx_DeactivateWakeUpTimer+0x18>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e047      	b.n	8002544 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2202      	movs	r2, #2
 80024be:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	22ca      	movs	r2, #202	; 0xca
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2253      	movs	r2, #83	; 0x53
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024de:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc,RTC_IT_WUT);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024ee:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024f0:	f7fe faa2 	bl	8000a38 <HAL_GetTick>
 80024f4:	60f8      	str	r0, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 80024f6:	e013      	b.n	8002520 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80024f8:	f7fe fa9e 	bl	8000a38 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002506:	d90b      	bls.n	8002520 <HAL_RTCEx_DeactivateWakeUpTimer+0x84>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	22ff      	movs	r2, #255	; 0xff
 800250e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2203      	movs	r2, #3
 8002514:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	771a      	strb	r2, [r3, #28]

      return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e011      	b.n	8002544 <HAL_RTCEx_DeactivateWakeUpTimer+0xa8>
  while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0e4      	beq.n	80024f8 <HAL_RTCEx_DeactivateWakeUpTimer+0x5c>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	22ff      	movs	r2, #255	; 0xff
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != (uint32_t)RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00b      	beq.n	800257a <HAL_RTCEx_WakeUpTimerIRQHandler+0x2e>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f816 	bl	8002594 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002578:	60da      	str	r2, [r3, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <HAL_RTCEx_WakeUpTimerIRQHandler+0x44>)
 800257c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002580:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	775a      	strb	r2, [r3, #29]
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40013c00 	.word	0x40013c00

08002594 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <__libc_init_array>:
 80025a8:	b570      	push	{r4, r5, r6, lr}
 80025aa:	4e0d      	ldr	r6, [pc, #52]	; (80025e0 <__libc_init_array+0x38>)
 80025ac:	4c0d      	ldr	r4, [pc, #52]	; (80025e4 <__libc_init_array+0x3c>)
 80025ae:	1ba4      	subs	r4, r4, r6
 80025b0:	10a4      	asrs	r4, r4, #2
 80025b2:	2500      	movs	r5, #0
 80025b4:	42a5      	cmp	r5, r4
 80025b6:	d109      	bne.n	80025cc <__libc_init_array+0x24>
 80025b8:	4e0b      	ldr	r6, [pc, #44]	; (80025e8 <__libc_init_array+0x40>)
 80025ba:	4c0c      	ldr	r4, [pc, #48]	; (80025ec <__libc_init_array+0x44>)
 80025bc:	f000 f820 	bl	8002600 <_init>
 80025c0:	1ba4      	subs	r4, r4, r6
 80025c2:	10a4      	asrs	r4, r4, #2
 80025c4:	2500      	movs	r5, #0
 80025c6:	42a5      	cmp	r5, r4
 80025c8:	d105      	bne.n	80025d6 <__libc_init_array+0x2e>
 80025ca:	bd70      	pop	{r4, r5, r6, pc}
 80025cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025d0:	4798      	blx	r3
 80025d2:	3501      	adds	r5, #1
 80025d4:	e7ee      	b.n	80025b4 <__libc_init_array+0xc>
 80025d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025da:	4798      	blx	r3
 80025dc:	3501      	adds	r5, #1
 80025de:	e7f2      	b.n	80025c6 <__libc_init_array+0x1e>
 80025e0:	0800267c 	.word	0x0800267c
 80025e4:	0800267c 	.word	0x0800267c
 80025e8:	0800267c 	.word	0x0800267c
 80025ec:	08002680 	.word	0x08002680

080025f0 <memset>:
 80025f0:	4402      	add	r2, r0
 80025f2:	4603      	mov	r3, r0
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d100      	bne.n	80025fa <memset+0xa>
 80025f8:	4770      	bx	lr
 80025fa:	f803 1b01 	strb.w	r1, [r3], #1
 80025fe:	e7f9      	b.n	80025f4 <memset+0x4>

08002600 <_init>:
 8002600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002602:	bf00      	nop
 8002604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002606:	bc08      	pop	{r3}
 8002608:	469e      	mov	lr, r3
 800260a:	4770      	bx	lr

0800260c <_fini>:
 800260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260e:	bf00      	nop
 8002610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002612:	bc08      	pop	{r3}
 8002614:	469e      	mov	lr, r3
 8002616:	4770      	bx	lr
